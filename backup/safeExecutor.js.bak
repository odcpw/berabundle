/**
 * safeExecutor.js - Safe Transaction Service Executor
 * 
 * This module provides an executor for Safe multisig wallets using
 * the SafeAdapter for direct interaction with the Safe Transaction Service API.
 */
const { ethers } = require('ethers');
const config = require('../../config');
const { ErrorHandler } = require('../../utils/errorHandler');
const SafeAdapter = require('../adapters/safeAdapter');

/**
 * Safe executor for multisig wallet transactions
 */
class SafeExecutor {
    /**
     * Create a new SafeExecutor
     * @param {ethers.providers.Provider} provider - Ethers provider
     */
    constructor(provider) {
        this.provider = provider || new ethers.providers.JsonRpcProvider(config.networks.berachain.rpcUrl);
        
        // Initialize the SafeAdapter
        this.adapter = null;
        
        console.log(`Safe Executor initialized with Berachain provider`);
    }
    
    /**
     * Ensure adapter is initialized
     * @private
     */
    _ensureAdapter() {
        if (!this.adapter) {
            // Create a new adapter if not already created
            this.adapter = new SafeAdapter(this.provider);
        }
        return this.adapter;
    }
    
    /**
     * Get Safe transaction URL for the web app
     * @param {string} safeAddress - Safe address
     * @param {string} safeTxHash - Safe transaction hash (optional)
     * @returns {string} Safe transaction URL
     */
    getSafeTransactionUrl(safeAddress, safeTxHash) {
        const adapter = this._ensureAdapter();
        return adapter.getSafeTransactionUrl(safeAddress, safeTxHash);
    }
    
    /**
     * Find Safes where an address is an owner
     * @param {string} ownerAddress - Owner address to check
     * @returns {Promise<Object>} List of Safes where the address is an owner
     */
    async getSafesByOwner(ownerAddress) {
        const adapter = this._ensureAdapter();
        return await adapter.getSafesByOwner(ownerAddress);
    }
    
    /**
     * Execute a bundle transaction through a Safe multisig wallet
     * This will propose the transaction to the Safe Transaction Service
     * @param {Object} options - Execution options
     * @param {string} options.safeAddress - Safe address
     * @param {Object} options.bundle - Bundle containing transaction data
     * @param {string} options.signerAddress - Address of the signer
     * @param {string} options.password - Password to decrypt the private key
     * @returns {Promise<Object>} Execution result
     */
    async execute(options) {
        try {
            const { safeAddress, bundle, signerAddress, password } = options;
            
            if (!safeAddress) {
                throw new Error("Safe address is required");
            }
            
            if (!bundle) {
                throw new Error("Bundle is required");
            }
            
            if (!signerAddress) {
                throw new Error("Signer address is required");
            }
            
            if (!password) {
                throw new Error("Password is required to decrypt the private key");
            }
            
            console.log(`Executing Safe transaction for ${safeAddress} with signer ${signerAddress}`);
            
            // Get adapter and propose the transaction
            const adapter = this._ensureAdapter();
            const result = await adapter.proposeSafeTransaction(safeAddress, bundle, signerAddress, password);
            
            if (!result.success) {
                throw new Error(`Failed to execute Safe transaction: ${result.message}`);
            }
            
            return {
                success: true,
                message: result.message,
                transactionUrl: result.transactionUrl,
                safeTxHash: result.safeTxHash,
                needsConfirmation: true,
                type: 'safe',
                status: 'proposed'
            };
        } catch (error) {
            console.error("SafeExecutor error:", error.message);
            if (error.stack) {
                console.error(error.stack);
            }
            
            return {
                success: false,
                message: `Safe execution failed: ${error.message}`,
                type: 'safe',
                status: 'failed'
            };
        }
    }
    
    /**
     * Convert a bundle from EOA format to Safe format
     * @param {Object} bundle - Bundle in EOA format
     * @param {string} safeAddress - Safe address
     * @returns {Object} Bundle in Safe format
     */
    convertEoaToSafeFormat(bundle, safeAddress) {
        const adapter = this._ensureAdapter();
        return adapter.convertEoaToSafeFormat(bundle, safeAddress);
    }
    
    /**
     * Confirm an existing Safe transaction
     * @param {string} safeAddress - Safe address
     * @param {string} safeTxHash - Transaction hash to confirm
     * @param {string} signerAddress - Address of the signer
     * @param {string} password - Password to decrypt the private key
     * @returns {Promise<Object>} Confirmation result
     */
    async confirmTransaction(safeAddress, safeTxHash, signerAddress, password) {
        try {
            const adapter = this._ensureAdapter();
            
            // First decrypt the private key
            const privateKey = await adapter.getDecryptedPrivateKey(signerAddress, password);
            
            // Create the signer
            const signer = new ethers.Wallet(privateKey, this.provider);
            
            // Calculate the transaction hash (will be provided by the caller in a real scenario)
            // This is just a placeholder as we don't have the actual transaction data
            const signature = await adapter.signTransactionHash(signer, safeTxHash);
            
            // Confirm the transaction
            await adapter.confirmTransaction(safeTxHash, signature);
            
            return {
                success: true,
                message: "Transaction confirmed successfully",
                safeTxHash
            };
        } catch (error) {
            console.error("Error confirming transaction:", error.message);
            return {
                success: false,
                message: `Failed to confirm transaction: ${error.message}`
            };
        }
    }
}

module.exports = SafeExecutor;